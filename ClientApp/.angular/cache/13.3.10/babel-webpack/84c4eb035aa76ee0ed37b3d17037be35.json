{"ast":null,"code":"import * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i7 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i6 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i3 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst _c0 = [\"tooltip\"];\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition({\n    scrollThrottle: SCROLL_THROTTLE_MS\n  });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\nclass _MatTooltipBase {\n  constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    this._viewInitialized = false;\n    this._pointerExitEventsInitialized = false;\n    this._viewportMargin = 8;\n    this._cssClassPrefix = 'mat';\n    this._showDelay = this._defaultOptions.showDelay;\n    this._hideDelay = this._defaultOptions.hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     */\n    this.touchGestures = 'auto';\n    this._message = '';\n    /** Manually-bound passive event listeners. */\n    this._passiveListeners = [];\n    /** Emits when the component is destroyed. */\n    this._destroyed = new Subject();\n    this._scrollStrategy = scrollStrategy;\n    this._document = _document;\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n    _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      if (this._overlayRef) {\n        this._updatePosition(this._overlayRef);\n      }\n    });\n  }\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    var _a;\n    if (value !== this._position) {\n      this._position = value;\n      if (this._overlayRef) {\n        this._updatePosition(this._overlayRef);\n        (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  /** Disables the display of the tooltip. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n    }\n  }\n  /** The default delay in ms before showing the tooltip after show is called */\n  get showDelay() {\n    return this._showDelay;\n  }\n  set showDelay(value) {\n    this._showDelay = coerceNumberProperty(value);\n  }\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  get hideDelay() {\n    return this._hideDelay;\n  }\n  set hideDelay(value) {\n    this._hideDelay = coerceNumberProperty(value);\n    if (this._tooltipInstance) {\n      this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n    }\n  }\n  /** The message to be displayed in the tooltip */\n  get message() {\n    return this._message;\n  }\n  set message(value) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n    // away the string-conversion: https://github.com/angular/components/issues/20684\n    this._message = value != null ? String(value).trim() : '';\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n      this._updateTooltipMessage();\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n        });\n      });\n    }\n  }\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._viewInitialized = true;\n    this._setupPointerEnterEventsIfNeeded();\n    this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        this._ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        this._ngZone.run(() => this.show());\n      }\n    });\n  }\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n    clearTimeout(this._touchstartTimeout);\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n    // Clean up the event listeners set in the constructor\n    this._passiveListeners.forEach(([event, listener]) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n    this._passiveListeners.length = 0;\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay = this.showDelay) {\n    if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n      return;\n    }\n    const overlayRef = this._createOverlay();\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n    const instance = this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    instance._triggerElement = this._elementRef.nativeElement;\n    instance._mouseLeaveHideDelay = this._hideDelay;\n    instance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    instance.show(delay);\n  }\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay = this.hideDelay) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n  /** Shows/hides the tooltip */\n  toggle() {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /** Create the overlay config and position strategy */\n  _createOverlay() {\n    var _a;\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`).withFlexibleDimensions(false).withViewportMargin(this._viewportMargin).withScrollableContainers(scrollableAncestors);\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      this._updateCurrentPositionClass(change.connectionPair);\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n      scrollStrategy: this._scrollStrategy()\n    });\n    this._updatePosition(this._overlayRef);\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n    this._overlayRef.outsidePointerEvents().pipe(takeUntil(this._destroyed)).subscribe(() => {\n      var _a;\n      return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction();\n    });\n    this._overlayRef.keydownEvents().pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        event.stopPropagation();\n        this._ngZone.run(() => this.hide(0));\n      }\n    });\n    if ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.disableTooltipInteractivity) {\n      this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n    }\n    return this._overlayRef;\n  }\n  /** Detaches the currently-attached tooltip. */\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n    this._tooltipInstance = null;\n  }\n  /** Updates the position of the current tooltip. */\n  _updatePosition(overlayRef) {\n    const position = overlayRef.getConfig().positionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    position.withPositions([this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)), this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))]);\n  }\n  /** Adds the configured offset to a position. Used as a hook for child classes. */\n  _addOffset(position) {\n    return position;\n  }\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition;\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition;\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n      this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef.updatePosition();\n        }\n      });\n    }\n  }\n  /** Updates the tooltip class */\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /** Inverts an overlay position. */\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the class on the overlay panel based on the current position of the tooltip. */\n  _updateCurrentPositionClass(connectionPair) {\n    const {\n      overlayY,\n      originX,\n      originY\n    } = connectionPair;\n    let newPosition;\n    // If the overlay is in the middle along the Y axis,\n    // it means that it's either before or after.\n    if (overlayY === 'center') {\n      // Note that since this information is used for styling, we want to\n      // resolve `start` and `end` to their real values, otherwise consumers\n      // would have to remember to do it themselves on each consumption.\n      if (this._dir && this._dir.value === 'rtl') {\n        newPosition = originX === 'end' ? 'left' : 'right';\n      } else {\n        newPosition = originX === 'start' ? 'left' : 'right';\n      }\n    } else {\n      newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n    }\n    if (newPosition !== this._currentPosition) {\n      const overlayRef = this._overlayRef;\n      if (overlayRef) {\n        const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n        overlayRef.removePanelClass(classPrefix + this._currentPosition);\n        overlayRef.addPanelClass(classPrefix + newPosition);\n      }\n      this._currentPosition = newPosition;\n    }\n  }\n  /** Binds the pointer events to the tooltip trigger. */\n  _setupPointerEnterEventsIfNeeded() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n      return;\n    }\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (this._platformSupportsMouseEvents()) {\n      this._passiveListeners.push(['mouseenter', () => {\n        this._setupPointerExitEventsIfNeeded();\n        this.show();\n      }]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      this._passiveListeners.push(['touchstart', () => {\n        // Note that it's important that we don't `preventDefault` here,\n        // because it can prevent click events from firing on the element.\n        this._setupPointerExitEventsIfNeeded();\n        clearTimeout(this._touchstartTimeout);\n        this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n      }]);\n    }\n    this._addListeners(this._passiveListeners);\n  }\n  _setupPointerExitEventsIfNeeded() {\n    if (this._pointerExitEventsInitialized) {\n      return;\n    }\n    this._pointerExitEventsInitialized = true;\n    const exitListeners = [];\n    if (this._platformSupportsMouseEvents()) {\n      exitListeners.push(['mouseleave', event => {\n        var _a;\n        const newTarget = event.relatedTarget;\n        if (!newTarget || !((_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.overlayElement.contains(newTarget))) {\n          this.hide();\n        }\n      }], ['wheel', event => this._wheelListener(event)]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      const touchendListener = () => {\n        clearTimeout(this._touchstartTimeout);\n        this.hide(this._defaultOptions.touchendHideDelay);\n      };\n      exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n    }\n    this._addListeners(exitListeners);\n    this._passiveListeners.push(...exitListeners);\n  }\n  _addListeners(listeners) {\n    listeners.forEach(([event, listener]) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n  _platformSupportsMouseEvents() {\n    return !this._platform.IOS && !this._platform.ANDROID;\n  }\n  /** Listener for the `wheel` event on the element. */\n  _wheelListener(event) {\n    if (this._isTooltipVisible()) {\n      const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n      const element = this._elementRef.nativeElement;\n      // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n      // won't fire if the user scrolls away using the wheel without moving their cursor. We\n      // work around it by finding the element under the user's cursor and closing the tooltip\n      // if it's not the trigger.\n      if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n        this.hide();\n      }\n    }\n  }\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n  _disableNativeGesturesIfNecessary() {\n    const gestures = this.touchGestures;\n    if (gestures !== 'off') {\n      const element = this._elementRef.nativeElement;\n      const style = element.style;\n      // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n      if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n        style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';\n      }\n      // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n      if (gestures === 'on' || !element.draggable) {\n        style.webkitUserDrag = 'none';\n      }\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n}\n_MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n_MatTooltipBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatTooltipBase,\n  inputs: {\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatTooltipBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i1.Overlay\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i2.ScrollDispatcher\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i3.Platform\n    }, {\n      type: i4.AriaDescriber\n    }, {\n      type: i4.FocusMonitor\n    }, {\n      type: undefined\n    }, {\n      type: i5.Directionality\n    }, {\n      type: undefined\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n  constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n    super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n    this._tooltipComponent = TooltipComponent;\n  }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(i0.ɵɵdirectiveInject(i1.Overlay), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i3.Platform), i0.ɵɵdirectiveInject(i4.AriaDescriber), i0.ɵɵdirectiveInject(i4.FocusMonitor), i0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.Directionality, 8), i0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), i0.ɵɵdirectiveInject(DOCUMENT));\n};\nMatTooltip.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostAttrs: [1, \"mat-tooltip-trigger\"],\n  exportAs: [\"matTooltip\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        'class': 'mat-tooltip-trigger'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1.Overlay\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i2.ScrollDispatcher\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i3.Platform\n    }, {\n      type: i4.AriaDescriber\n    }, {\n      type: i4.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nclass _TooltipComponentBase {\n  constructor(_changeDetectorRef, animationMode) {\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Property watched by the animation framework to show or hide the tooltip */\n    this._visibility = 'initial';\n    /** Whether interactions on the page should close the tooltip */\n    this._closeOnInteraction = false;\n    /** Whether the tooltip is currently visible. */\n    this._isVisible = false;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    this._onHide = new Subject();\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    clearTimeout(this._hideTimeoutId);\n    this._showTimeoutId = setTimeout(() => {\n      this._toggleVisibility(true);\n      this._showTimeoutId = undefined;\n    }, delay);\n  }\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    clearTimeout(this._showTimeoutId);\n    this._hideTimeoutId = setTimeout(() => {\n      this._toggleVisibility(false);\n      this._hideTimeoutId = undefined;\n    }, delay);\n  }\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden() {\n    return this._onHide;\n  }\n  /** Whether the tooltip is being displayed. */\n  isVisible() {\n    return this._isVisible;\n  }\n  ngOnDestroy() {\n    clearTimeout(this._showTimeoutId);\n    clearTimeout(this._hideTimeoutId);\n    this._onHide.complete();\n    this._triggerElement = null;\n  }\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n  _handleMouseLeave({\n    relatedTarget\n  }) {\n    if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n      this.hide(this._mouseLeaveHideDelay);\n    }\n  }\n  /**\n   * Callback for when the timeout in this.show() gets completed.\n   * This method is only needed by the mdc-tooltip, and so it is only implemented\n   * in the mdc-tooltip, not here.\n   */\n  _onShow() {}\n  /** Event listener dispatched when an animation on the tooltip finishes. */\n  _handleAnimationEnd({\n    animationName\n  }) {\n    if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n      this._finalizeAnimation(animationName === this._showAnimation);\n    }\n  }\n  /** Handles the cleanup after an animation has finished. */\n  _finalizeAnimation(toVisible) {\n    if (toVisible) {\n      this._closeOnInteraction = true;\n    } else if (!this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n  /** Toggles the visibility of the tooltip element. */\n  _toggleVisibility(isVisible) {\n    // We set the classes directly here ourselves so that toggling the tooltip state\n    // isn't bound by change detection. This allows us to hide it even if the\n    // view ref has been detached from the CD tree.\n    const tooltip = this._tooltip.nativeElement;\n    const showClass = this._showAnimation;\n    const hideClass = this._hideAnimation;\n    tooltip.classList.remove(isVisible ? hideClass : showClass);\n    tooltip.classList.add(isVisible ? showClass : hideClass);\n    this._isVisible = isVisible;\n    // It's common for internal apps to disable animations using `* { animation: none !important }`\n    // which can break the opening sequence. Try to detect such cases and work around them.\n    if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n      const styles = getComputedStyle(tooltip);\n      // Use `getPropertyValue` to avoid issues with property renaming.\n      if (styles.getPropertyValue('animation-duration') === '0s' || styles.getPropertyValue('animation-name') === 'none') {\n        this._animationsDisabled = true;\n      }\n    }\n    if (isVisible) {\n      this._onShow();\n    }\n    if (this._animationsDisabled) {\n      tooltip.classList.add('_mat-animation-noopable');\n      this._finalizeAnimation(isVisible);\n    }\n  }\n}\n_TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) {\n  return new (t || _TooltipComponentBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n_TooltipComponentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _TooltipComponentBase\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_TooltipComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n  constructor(changeDetectorRef, _breakpointObserver, animationMode) {\n    super(changeDetectorRef, animationMode);\n    this._breakpointObserver = _breakpointObserver;\n    /** Stream that emits whether the user has a handset-sized display.  */\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    this._showAnimation = 'mat-tooltip-show';\n    this._hideAnimation = 'mat-tooltip-hide';\n  }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i6.BreakpointObserver), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\nTooltipComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  viewQuery: function TooltipComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tooltip = _t.first);\n    }\n  },\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function TooltipComponent_mouseleave_HostBindingHandler($event) {\n        return ctx._handleMouseLeave($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"zoom\", ctx.isVisible() ? 1 : null);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 6,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\", \"animationend\"], [\"tooltip\", \"\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵlistener(\"animationend\", function TooltipComponent_Template_div_animationend_0_listener($event) {\n        return ctx._handleAnimationEnd($event);\n      });\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      let tmp_0_0;\n      i0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = i0.ɵɵpipeBind1(2, 4, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n      i0.ɵɵproperty(\"ngClass\", ctx.tooltipClass);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  directives: [i7.NgClass],\n  pipes: [i7.AsyncPipe],\n  styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': 'isVisible() ? 1 : null',\n        '(mouseleave)': '_handleMouseLeave($event)',\n        'aria-hidden': 'true'\n      },\n      template: \"<div #tooltip\\n     class=\\\"mat-tooltip\\\"\\n     (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\">{{message}}</div>\\n\",\n      styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i6.BreakpointObserver\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    _tooltip: [{\n      type: ViewChild,\n      args: ['tooltip', {\n        // Use a static query here since we interact directly with\n        // the DOM which can happen before `ngAfterViewInit`.\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n  return new (t || MatTooltipModule)();\n};\nMatTooltipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n      declarations: [MatTooltip, TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":{"version":3,"names":["i1","Overlay","OverlayModule","i4","A11yModule","i7","DOCUMENT","CommonModule","i0","InjectionToken","Directive","Inject","Input","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","MatCommonModule","i2","CdkScrollableModule","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","i6","Breakpoints","i3","normalizePassiveListenerOptions","ComponentPortal","ANIMATION_MODULE_TYPE","Subject","takeUntil","take","i5","trigger","state","style","transition","animate","keyframes","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","PANEL_CLASS","passiveListenerOptions","passive","LONGPRESS_DELAY","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","_MatTooltipBase","constructor","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","_showDelay","_hideDelay","touchGestures","_message","_passiveListeners","_destroyed","_scrollStrategy","change","pipe","subscribe","_overlayRef","_updatePosition","value","_a","_tooltipInstance","show","updatePosition","disabled","hide","_setupPointerEnterEventsIfNeeded","_mouseLeaveHideDelay","message","removeDescription","nativeElement","String","trim","_isTooltipVisible","_updateTooltipMessage","runOutsideAngular","Promise","resolve","then","describe","tooltipClass","_tooltipClass","_setTooltipClass","ngAfterViewInit","monitor","origin","run","ngOnDestroy","clearTimeout","_touchstartTimeout","dispose","forEach","event","listener","removeEventListener","length","next","complete","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","_tooltipComponent","instance","attach","_triggerElement","afterHidden","toggle","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","outsidePointerEvents","_handleBodyInteraction","keydownEvents","keyCode","preventDefault","stopPropagation","disableTooltipInteractivity","addPanelClass","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","_addOffset","Object","assign","main","fallback","isLtr","originPosition","originX","originY","ngDevMode","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","newPosition","_currentPosition","classPrefix","removePanelClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","newTarget","relatedTarget","overlayElement","contains","_wheelListener","touchendListener","listeners","addEventListener","IOS","ANDROID","elementUnderPointer","elementFromPoint","clientX","clientY","element","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵfac","ɵdir","type","ElementRef","ScrollDispatcher","ViewContainerRef","NgZone","Platform","AriaDescriber","FocusMonitor","undefined","Directionality","decorators","args","MatTooltip","elementRef","scrollDispatcher","viewContainerRef","ngZone","platform","ariaDescriber","focusMonitor","dir","defaultOptions","TooltipComponent","selector","exportAs","host","_TooltipComponentBase","_changeDetectorRef","animationMode","_visibility","_closeOnInteraction","_isVisible","_onHide","_animationsDisabled","_toggleVisibility","markForCheck","_handleMouseLeave","_onShow","_handleAnimationEnd","animationName","_showAnimation","_hideAnimation","_finalizeAnimation","toVisible","tooltip","_tooltip","showClass","hideClass","classList","remove","add","getComputedStyle","styles","getPropertyValue","ChangeDetectorRef","changeDetectorRef","_breakpointObserver","_isHandset","observe","Handset","BreakpointObserver","ɵcmp","NgClass","AsyncPipe","encapsulation","None","changeDetection","OnPush","template","static","MatTooltipModule","ɵmod","ɵinj","imports","exports","declarations","providers","matTooltipAnimations","tooltipState","opacity","transform","offset"],"sources":["D:/dan99/Desktop/SalaAdmin/ClientApp/node_modules/@angular/material/fesm2015/tooltip.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i7 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i6 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i3 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        this._showDelay = this._defaultOptions.showDelay;\n        this._hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        var _a;\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled ||\n            !this.message ||\n            (this._isTooltipVisible() &&\n                !this._tooltipInstance._showTimeoutId &&\n                !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        var _a;\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => { var _a; return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction(); });\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)),\n            this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback)),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    var _a;\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !((_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.overlayElement.contains(newTarget))) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTooltipBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatTooltipBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatTooltipBase, inputs: { position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTooltipBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i2.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i3.Platform }, { type: i4.AriaDescriber }, { type: i4.FocusMonitor }, { type: undefined }, { type: i5.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n    }\n}\nMatTooltip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i2.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i3.Platform }, { token: i4.AriaDescriber }, { token: i4.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nMatTooltip.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTooltip, selector: \"[matTooltip]\", host: { classAttribute: \"mat-tooltip-trigger\" }, exportAs: [\"matTooltip\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-tooltip-trigger',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i2.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i3.Platform }, { type: i4.AriaDescriber }, { type: i4.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef, animationMode) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Whether the tooltip is currently visible. */\n        this._isVisible = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            this.hide(this._mouseLeaveHideDelay);\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        this._isVisible = isVisible;\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n}\n_TooltipComponentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _TooltipComponentBase, deps: [{ token: i0.ChangeDetectorRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_TooltipComponentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _TooltipComponentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _TooltipComponentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _breakpointObserver, animationMode) {\n        super(changeDetectorRef, animationMode);\n        this._breakpointObserver = _breakpointObserver;\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n        this._showAnimation = 'mat-tooltip-show';\n        this._hideAnimation = 'mat-tooltip-hide';\n    }\n}\nTooltipComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i6.BreakpointObserver }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nTooltipComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: TooltipComponent, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" }, properties: { \"style.zoom\": \"isVisible() ? 1 : null\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div #tooltip\\n     class=\\\"mat-tooltip\\\"\\n     (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\">{{message}}</div>\\n\", styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\\n\"], directives: [{ type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], pipes: { \"async\": i7.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': 'isVisible() ? 1 : null',\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, template: \"<div #tooltip\\n     class=\\\"mat-tooltip\\\"\\n     (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\">{{message}}</div>\\n\", styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: i6.BreakpointObserver }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, declarations: [MatTooltip, TooltipComponent], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] });\nMatTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    declarations: [MatTooltip, TooltipComponent],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 }),\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}